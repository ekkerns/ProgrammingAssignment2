cacheSolve(makeCacheMatrix(z<-matrix(2,2)))
makeCacheMatrix <- function(x = matrix()) {
inverse<- NULL
set <-function(y){
x<<-y
inverse<<-NULL
}
get <-function() x
setinverse <-function(solve) inverse<<- solve
getinverse <-function() inverse
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## checks to see if the inverse has already been made, if so, returns it, if not, calculates it
cacheSolve <- function(x, ...) {
inverse<-x$getinverse()
if(!is.null(inverse)){
message("getting pre-calculated inverse")
return(inverse)
}
data<-x$get()
inverse<-solve(data)
x$setinverse(inverse)
inverse
}
cacheSolve(makeCacheMatrix(z<-matrix(2,2)))
z<matrix(2,2)
z<-matrix(2,2)
z
z<-matrix(2,4)
z
z<-matrix(4,4)
z
z<-matrix(2:10,4,4)
z<-matrix(1:4,4,4)
z
cacheSolve(makeCacheMatrix(z))
cacheSolve(makeCacheMatrix(z<-matrix(2,2)))
cacheSolve(makeCacheMatrix(z))
cacheSolve(makeCacheMatrix(z))
z<-matrix(1:4,4,4)
cacheSolve(makeCacheMatrix(z))
cacheSolve(makeCacheMatrix(z))
